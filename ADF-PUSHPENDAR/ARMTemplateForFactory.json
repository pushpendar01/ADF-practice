{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADF-PUSHPENDAR"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureSql_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSql'"
		},
		"Datalake_LS_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'Datalake_LS'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adfinfydatalake.dfs.core.windows.net/"
		},
		"Datalake_LS_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adfinfydatalake.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/datra flow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"student": {
										"foldername": "StudentData",
										"filename": "Student.csv"
									},
									"department": {
										"foldername": "StudentData",
										"filename": "Department.csv"
									},
									"sink1": {
										"foldername": "Newoutputfromtransformation",
										"filename": "studept.csv"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Data flow filter",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow4filter",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"student": {
										"foldername": "StudentData",
										"filename": "Student.csv"
									},
									"sink2": {
										"foldername": "StudentData",
										"filename": "Student.csv"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-01T20:51:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow4filter')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/group by')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "groupby",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"student": {
										"foldername": "StudentData",
										"filename": "Student.csv"
									},
									"sink2": {
										"foldername": "groupby",
										"filename": "ans.csv"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-01T20:51:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/groupby')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Power Query1",
						"type": "ExecuteWranglingDataflow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "powerquery1",
								"type": "DataFlowReference",
								"datasetParameters": {
									"inputdata": {},
									"UserQueryonlydatasetforall": {
										"foldername": "PowerqueryOutput",
										"filename": "file1.csv"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"queries": [
								{
									"queryName": "UserQuery",
									"dataflowSinks": [
										{
											"name": "UserQueryonlydatasetforall",
											"dataset": {
												"referenceName": "onlydatasetforall",
												"type": "DatasetReference",
												"parameters": {
													"foldername": "PowerqueryOutput",
													"filename": "file1.csv"
												}
											},
											"script": "sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tId as string,\n\t\tName as string,\n\t\tDOB as string,\n\t\tCity as string,\n\t\tState as string,\n\t\tDeptId as string\n\t),\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> UserQueryonlydatasetforall"
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-04T10:12:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/powerquery1')]",
				"[concat(variables('factoryId'), '/datasets/onlydatasetforall')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/task4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "list of files",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds4t4",
								"type": "DatasetReference",
								"parameters": {
									"folder": "StudentData",
									"filename": "*"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "csv file only",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "list of files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('list of files').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name,'.csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "loop",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "csv file only",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('csv file only').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "varforswitch",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@split(toLower(item().name),'.')[0]",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "student",
												"activities": [
													{
														"name": "Copy data1",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".txt"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "ds4t4",
																"type": "DatasetReference",
																"parameters": {
																	"folder": "StudentData",
																	"filename": {
																		"value": "@variables('varforswitch')",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ds4t4",
																"type": "DatasetReference",
																"parameters": {
																	"folder": "finaloutput4",
																	"filename": {
																		"value": "studentlist.csv",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											},
											{
												"value": "result",
												"activities": [
													{
														"name": "Result",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".txt"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "ds4t4",
																"type": "DatasetReference",
																"parameters": {
																	"folder": "StudentData",
																	"filename": {
																		"value": "@variables('varforswitch')",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ds4t4",
																"type": "DatasetReference",
																"parameters": {
																	"folder": "finaloutput4",
																	"filename": {
																		"value": "studentResult",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											},
											{
												"value": "department",
												"activities": [
													{
														"name": "dept",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".txt"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "ds4t4",
																"type": "DatasetReference",
																"parameters": {
																	"folder": "StudentData",
																	"filename": {
																		"value": "@variables('varforswitch')",
																		"type": "Expression"
																	}
																}
															}
														],
														"outputs": [
															{
																"referenceName": "ds4t4",
																"type": "DatasetReference",
																"parameters": {
																	"folder": "finaloutput4",
																	"filename": {
																		"value": "studentdepartment.csv",
																		"type": "Expression"
																	}
																}
															}
														]
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"varforswitch": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-01T10:21:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds4t4')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds4t4')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Datalake_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folder": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"fileSystem": "pushpendar"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Datalake_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/inputdata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Datalake_LS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Student.csv",
						"folderPath": "StudentData",
						"fileSystem": "pushpendar"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Id",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "DOB",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "State",
						"type": "String"
					},
					{
						"name": "DeptId",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Datalake_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/onlydatasetforall')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Datalake_LS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"foldername": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().foldername",
							"type": "Expression"
						},
						"fileSystem": "pushpendar"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Id",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "DOB",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "State",
						"type": "String"
					},
					{
						"name": "DeptId",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Datalake_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSql')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSql_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Datalake_LS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('Datalake_LS_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('Datalake_LS_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "onlydatasetforall",
								"type": "DatasetReference"
							},
							"name": "student"
						},
						{
							"dataset": {
								"referenceName": "onlydatasetforall",
								"type": "DatasetReference"
							},
							"name": "department"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "onlydatasetforall",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "Datalake_LS",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "ModifyColumns1",
							"description": "Autogenerated by data preview actions"
						},
						{
							"name": "ModifyColumns2",
							"description": "Autogenerated by data preview actions"
						},
						{
							"name": "RemoveColumns1",
							"description": "Autogenerated by data preview actions"
						},
						{
							"name": "join2"
						},
						{
							"name": "RemoveColumns2",
							"description": "Autogenerated by data preview actions"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          Name as string,",
						"          DOB as string,",
						"          City as string,",
						"          State as string,",
						"          DeptId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> student",
						"source(output(",
						"          Id as short,",
						"          Name as string,",
						"          EstYear as short,",
						"          HOD as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> department",
						"student derive(State = upper(State)) ~> ModifyColumns1",
						"ModifyColumns1 derive(DeptId = toShort(DeptId)) ~> ModifyColumns2",
						"ModifyColumns2 select(mapColumn(",
						"          Name,",
						"          State,",
						"          DeptId",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveColumns1",
						"RemoveColumns1, RemoveColumns2 join(DeptId == Id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"department select(mapColumn(",
						"          Id,",
						"          Name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveColumns2",
						"join2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as string,",
						"          Name as string,",
						"          DOB as string,",
						"          City as string,",
						"          State as string,",
						"          DeptId as string",
						"     ),",
						"     partitionFileNames:['studept.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/onlydatasetforall')]",
				"[concat(variables('factoryId'), '/linkedServices/Datalake_LS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow4filter')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "onlydatasetforall",
								"type": "DatasetReference"
							},
							"name": "student"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "onlydatasetforall",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "filterdept"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          Name as string,",
						"          DOB as string,",
						"          City as string,",
						"          State as string,",
						"          DeptId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> student",
						"student filter(equals(DeptId,'1')) ~> filterdept",
						"filterdept sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as string,",
						"          Name as string,",
						"          DOB as string,",
						"          City as string,",
						"          State as string,",
						"          DeptId as string",
						"     ),",
						"     partitionFileNames:['stuafterfilter.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/onlydatasetforall')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/group by and joins')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "inputdata",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> inputdata",
							"dataset": {
								"referenceName": "inputdata",
								"type": "DatasetReference"
							}
						},
						{
							"name": "onlydatasetforall",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> onlydatasetforall",
							"dataset": {
								"referenceName": "onlydatasetforall",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared inputdata = let AdfDoc = AzureStorage.DataLakeContents(\"https://adfinfydatalake.dfs.core.windows.net/pushpendar/StudentData/Student.csv\"),Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]), PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]) in  PromotedHeaders;\r\nshared onlydatasetforall = let AdfDoc = AzureStorage.DataLakeContents(\"https://adfinfydatalake.dfs.core.windows.net/pushpendar/StudentData/Department.csv\"),Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]), PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]) in  PromotedHeaders;\r\nshared UserQuery = let Source = #\"inputdata\",\r\n  #\"Removed columns\" = Table.RemoveColumns(Source, {\"DOB\", \"State\"}),\r\n  #\"Merged queries\" = Table.NestedJoin(#\"Removed columns\", {\"DeptId\"}, onlydatasetforall, {\"Id\"}, \"onlydatasetforall\", JoinKind.LeftOuter),\r\n  #\"Expanded onlydatasetforall\" = Table.ExpandTableColumn(#\"Merged queries\", \"onlydatasetforall\", {\"Id\", \"Name\"}, {\"Id.1\", \"Name.1\"}),\r\n  #\"Removed columns 1\" = Table.RemoveColumns(#\"Expanded onlydatasetforall\", {\"City\", \"DeptId\"}),\r\n  #\"Grouped rows\" = Table.Group(#\"Removed columns 1\", {\"Id.1\"}, {{\"numbers\", each Table.RowCount(_), Int64.Type}}) in #\"Grouped rows\";\r\n",
					"documentLocale": "en-us"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/inputdata')]",
				"[concat(variables('factoryId'), '/datasets/onlydatasetforall')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/groupby')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "onlydatasetforall",
								"type": "DatasetReference"
							},
							"name": "student"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "onlydatasetforall",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "aggregate"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          Name as string,",
						"          DOB as string,",
						"          City as string,",
						"          State as string,",
						"          DeptId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> student",
						"student aggregate(groupBy(DeptId),",
						"     Total = count((Name))) ~> aggregate",
						"aggregate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as string,",
						"          Name as string,",
						"          DOB as string,",
						"          City as string,",
						"          State as string,",
						"          DeptId as string",
						"     ),",
						"     partitionFileNames:['stuafterfilter.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/onlydatasetforall')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/powerquery1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "inputdata",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> inputdata",
							"dataset": {
								"referenceName": "inputdata",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared inputdata = let AdfDoc = AzureStorage.DataLakeContents(\"https://adfinfydatalake.dfs.core.windows.net/pushpendar/StudentData/Student.csv\"),Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]), PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]) in  PromotedHeaders;\r\nshared UserQuery = let Source = #\"inputdata\",\r\n  #\"Removed columns\" = Table.RemoveColumns(Source, {\"DeptId\"}),\r\n  #\"Uppercased text\" = Table.TransformColumns(#\"Removed columns\", {{\"City\", each Text.Upper(_), type nullable text}}) in #\"Uppercased text\";\r\n",
					"documentLocale": "en-us"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/inputdata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/splitDerivedExistsUnionLookup')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "inputdata",
								"type": "DatasetReference"
							},
							"name": "student"
						},
						{
							"dataset": {
								"referenceName": "onlydatasetforall",
								"type": "DatasetReference"
							},
							"name": "department"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "onlydatasetforall",
								"type": "DatasetReference"
							},
							"name": "lookupoutput"
						},
						{
							"dataset": {
								"referenceName": "onlydatasetforall",
								"type": "DatasetReference"
							},
							"name": "splitUnionderivedExists"
						}
					],
					"transformations": [
						{
							"name": "splitondept"
						},
						{
							"name": "union1"
						},
						{
							"name": "derivedColumn"
						},
						{
							"name": "exists"
						},
						{
							"name": "lookup"
						},
						{
							"name": "RemoveColumns1",
							"description": "Autogenerated by data preview actions"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          Name as string,",
						"          DOB as string,",
						"          City as string,",
						"          State as string,",
						"          DeptId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> student",
						"source(output(",
						"          Id as short,",
						"          Name as string,",
						"          EstYear as short,",
						"          HOD as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> department",
						"student split(equals(DeptId, '1'),",
						"     equals(DeptId, '4'),",
						"     disjoint: false) ~> splitondept@(IT, CS, Allother)",
						"splitondept@IT, splitondept@CS union(byName: true)~> union1",
						"union1 derive(capital = upper(State)) ~> derivedColumn",
						"derivedColumn, department exists(toShort(DeptId) == department@Id,",
						"     negate:false,",
						"     broadcast: 'auto')~> exists",
						"student, department lookup(toShort(DeptId) == department@Id,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup",
						"lookup select(mapColumn(",
						"          DOB,",
						"          City,",
						"          DeptId,",
						"          Id,",
						"          Name,",
						"          HOD",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveColumns1",
						"RemoveColumns1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as string,",
						"          Name as string,",
						"          DOB as string,",
						"          City as string,",
						"          State as string,",
						"          DeptId as string",
						"     ),",
						"     partitionFileNames:['Lookupoutput.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> lookupoutput",
						"exists sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as string,",
						"          Name as string,",
						"          DOB as string,",
						"          City as string,",
						"          State as string,",
						"          DeptId as string",
						"     ),",
						"     partitionFileNames:['SDEUL4.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> splitUnionderivedExists"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/inputdata')]",
				"[concat(variables('factoryId'), '/datasets/onlydatasetforall')]"
			]
		}
	]
}