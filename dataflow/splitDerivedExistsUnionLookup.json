{
	"name": "splitDerivedExistsUnionLookup",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "inputdata",
						"type": "DatasetReference"
					},
					"name": "student"
				},
				{
					"dataset": {
						"referenceName": "onlydatasetforall",
						"type": "DatasetReference"
					},
					"name": "department"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "onlydatasetforall",
						"type": "DatasetReference"
					},
					"name": "lookupoutput"
				},
				{
					"dataset": {
						"referenceName": "onlydatasetforall",
						"type": "DatasetReference"
					},
					"name": "splitUnionderivedExists"
				}
			],
			"transformations": [
				{
					"name": "splitondept"
				},
				{
					"name": "union1"
				},
				{
					"name": "derivedColumn"
				},
				{
					"name": "exists"
				},
				{
					"name": "lookup"
				},
				{
					"name": "RemoveColumns1",
					"description": "Autogenerated by data preview actions"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Id as string,",
				"          Name as string,",
				"          DOB as string,",
				"          City as string,",
				"          State as string,",
				"          DeptId as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> student",
				"source(output(",
				"          Id as short,",
				"          Name as string,",
				"          EstYear as short,",
				"          HOD as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> department",
				"student split(equals(DeptId, '1'),",
				"     equals(DeptId, '4'),",
				"     disjoint: false) ~> splitondept@(IT, CS, Allother)",
				"splitondept@IT, splitondept@CS union(byName: true)~> union1",
				"union1 derive(capital = upper(State)) ~> derivedColumn",
				"derivedColumn, department exists(toShort(DeptId) == department@Id,",
				"     negate:false,",
				"     broadcast: 'auto')~> exists",
				"student, department lookup(toShort(DeptId) == department@Id,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup",
				"lookup select(mapColumn(",
				"          DOB,",
				"          City,",
				"          DeptId,",
				"          Id,",
				"          Name,",
				"          HOD",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveColumns1",
				"RemoveColumns1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id as string,",
				"          Name as string,",
				"          DOB as string,",
				"          City as string,",
				"          State as string,",
				"          DeptId as string",
				"     ),",
				"     partitionFileNames:['Lookupoutput.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> lookupoutput",
				"exists sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id as string,",
				"          Name as string,",
				"          DOB as string,",
				"          City as string,",
				"          State as string,",
				"          DeptId as string",
				"     ),",
				"     partitionFileNames:['SDEUL4.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> splitUnionderivedExists"
			]
		}
	}
}